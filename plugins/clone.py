from info import API_ID, API_HASH, LOG_CHANNEL, ADMINS
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, CallbackQuery
from utils import *
from database.db import db
import re
import pytz
from pyrogram.errors import InputUserDeactivated, AccessTokenExpired, AccessTokenInvalid, UserNotParticipant, FloodWait, UserIsBlocked, PeerIdInvalid
from datetime import datetime
import asyncio
from Script import script
import time

@Client.on_message(filters.private & filters.command('frestart') & filters.user(ADMINS))
async def frestart(client, message):
    msg = await message.reply('üîÑ Restarting bots, please wait...')
    
    bots = await db.get_all_bots()
    for bot in bots:
        await restart_clone_bot(bot)
        
    await msg.edit("‚úÖ All eligible bots have been restarted successfully!")

@Client.on_message(filters.command('clone_auto'))
async def clone_menu(client, message):
    if message.chat.type != enums.ChatType.PRIVATE:
        btn = [[
            InlineKeyboardButton("+ ·¥è·¥ò·¥á…¥ …™…¥ ·¥ò·¥ç +", url=f'http://t.me/{temp.BOT_USERNAME}?start=clone')
        ]]
        return await message.reply('<b>·¥ò ü·¥á·¥Äs·¥á ·¥è·¥ò·¥á…¥ ·¥Ñ ü·¥è…¥·¥á ·¥ç·¥á…¥·¥ú …™…¥ ·¥ò·¥ç üò¢</b>', reply_markup=InlineKeyboardMarkup(btn))

    bot_found = await db.is_bot_found_using_user(message.from_user.id)
    if bot_found:
        bot = await db.get_bot_from_user(message.from_user.id)
        settings = await db.get_bot_settings(bot['bot_id'])
        buttons = [[
            InlineKeyboardButton('s·¥õ·¥Ä Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á', callback_data=f"bot_start_message_setgs#{bot['bot_id']}"),
            InlineKeyboardButton('…™·¥ç·¥Ö ô', callback_data=f"bot_imdb_setgs#{bot['bot_id']}"),
        ],[
            InlineKeyboardButton('·¥ç·¥Äx  Ä·¥ás·¥ú ü·¥õs', callback_data=f"bot_max_results_setgs#{bot['bot_id']}"),
            InlineKeyboardButton(' Ä·¥ás·¥ú ü·¥õ ·¥ç·¥è·¥Ö·¥á', callback_data=f"c_files_mode#{bot['bot_id']}")
        ],[
            InlineKeyboardButton('Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥', callback_data=f"bot_caption_setgs#{bot['bot_id']}"),
            InlineKeyboardButton('·¥ò·¥ç Íú±·¥á·¥Ä Ä·¥Ñ ú', callback_data=f"bot_pm_search_setgs#{bot['bot_id']}")
        ],[
            InlineKeyboardButton('Íú∞…™ ü·¥õ·¥á Ä ·¥Ö·¥á ü ·¥õ…™·¥ç·¥á', callback_data=f"bot_auto_delete_setgs#{bot['bot_id']}"),
            InlineKeyboardButton('Íú∞…™ ü·¥á ·¥Ö·¥á ü ·¥õ…™·¥ç·¥á', callback_data=f"bot_file_auto_delete_setgs#{bot['bot_id']}")
        ],[
            InlineKeyboardButton('s ú·¥è Ä·¥õ  ü…™…¥·¥ã', callback_data=f"bot_shortlink_setgs#{bot['bot_id']}"),
            InlineKeyboardButton('·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã', callback_data=f"bot_tutorial_setgs#{bot['bot_id']}")
        ],[
            InlineKeyboardButton('Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f"bot_force_channel_setgs#{bot['bot_id']}"),
            InlineKeyboardButton(' ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f"bot_log_channel_setgs#{bot['bot_id']}") 
        ],[
            InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f"bot_update_setgs#{bot['bot_id']}"),
            InlineKeyboardButton('·¥ç·¥è…¥…¢·¥è ·¥Ö ô', callback_data=f"bot_mongodb_setgs#{bot['bot_id']}")
        ],[
            InlineKeyboardButton('·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á  ô·¥è·¥õ' if settings['is_active'] else '·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á  ô·¥è·¥õ', callback_data=f"bot_update_active#{bot['bot_id']}#{settings['is_active']}"),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á  ô·¥è·¥õ', callback_data='bot_delete')
        ],[
            InlineKeyboardButton("‚ö†Ô∏è ·¥Ñ ü·¥ès·¥á / ·¥Ö·¥á ü·¥á·¥õ·¥á ‚ö†Ô∏è", callback_data=f'close#{message.from_user.id}')
        ]]
        used = await db.get_bot_last_used(bot['bot_id'])
        tz = pytz.timezone('Asia/Colombo')
        last_used = get_time((datetime.now(tz) - used.astimezone(tz)).total_seconds())
        await message.reply(f"<b>ü§ñ <u>B·¥è·¥õ D·¥á·¥õ·¥Ä…™ üs:</u>\n\n‚ú¶ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á : @{bot['username']}\n‚ú¶ Íú±·¥õ·¥Ä·¥õ·¥úÍú± : <code>{'·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ‚úÖ' if settings['is_active'] else '·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á ‚ùå'}</code>\n‚ú¶  ü·¥Äs·¥õ ·¥ús·¥á·¥Ö ·¥è…¥ : <code>{last_used}</code> ·¥Ä…¢·¥è\n\n<u>N·¥è·¥õ·¥á :</u> <i>…™Íú∞ ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ …¥·¥è·¥õ ·¥ús…™…¥…¢ ·¥Ä ü·¥è…¥…¢ ·¥è…¥·¥á ·¥°·¥á·¥á·¥ã ·¥õ ú·¥á…¥ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á.</i>\n\nü¶ä M·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è ‚Ä∫‚Ä∫ <a href=https://t.me/Crazybotz>cRAZY BoTZ</a></b>", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        b = await message.reply('<b>1) s·¥á…¥·¥Ö <code>/newbot</code> ·¥õ·¥è @BotFather\n2) …¢…™·¥†·¥á ·¥Ä …¥·¥Ä·¥ç·¥á Íú∞·¥è Ä  è·¥è·¥ú Ä  ô·¥è·¥õ.\n3) …¢…™·¥†·¥á ·¥Ä ·¥ú…¥…™«´·¥ú·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á.\n4) ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™·¥õ ú  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.\n5) Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>')
        msg = await client.listen(message.from_user.id)
        if msg.text == '/cancel':
            await b.delete()
            return await message.reply('<b>·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss üö´</b>')
        if msg.forward_from and msg.forward_from.id == 93372553:
            try:
                bot_token = re.findall(r"\b(\d+:[A-Za-z0-9_-]+)\b", msg.text)[0]
            except:
                await b.delete()
                return await message.reply('<b>s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ üòï</b>')
        else:
            await b.delete()
            return await message.reply('<b>…¥·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö Íú∞ Ä·¥è·¥ç @BotFather üòë</b>')
        await b.delete()
        token_found = await db.is_bot_found_using_token(bot_token)
        if token_found:
            return await message.reply("<b>‚ö†Ô∏è ·¥è·¥è·¥òs! ·¥õ ú…™s  ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥ú…¥…¥…™…¥…¢...</b>")
        c = await message.reply('<b>üßë‚Äçüíª ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ …™…¥Íú∞·¥è...</b>')
        clone_bot = Client(
            name=bot_token,
            api_id=API_ID,
            api_hash=API_HASH,
            bot_token=bot_token,
            plugins={"root": "clone_plugins"}
        )
        try:
            await clone_bot.start()
        except Exception as e:
            await c.edit(f'Error - <code>{e}</code>')
            return
        me = await clone_bot.get_me()
        temp.CLONE_BOTS_START_TIME[me.id] = time.time()
        temp.CLONE_BOTS[message.from_user.id] = clone_bot
        await clone_bot.set_bot_commands(
            [BotCommand("start", "Start The Bot!"),
             BotCommand("stats", "Get Bot Status."),
             BotCommand("users", "Get Users."),
             BotCommand("broadcast", "Broadcast Message to bot users.")]
        )
        if message.from_user.username:
            owner = f"<a href=https://t.me/{message.from_user.username}>{message.from_user.first_name}</a>"
        else:
            owner = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
        await db.add_bot(message.from_user.id, owner, me.id, bot_token, me.username)
        tz = pytz.timezone('Asia/Colombo')
        await db.update_bot_last_used(me.id, datetime.now(tz))
        await client.send_message(LOG_CHANNEL, script.NEW_BOT_TXT.format(me.username, me.id, message.from_user.mention))
        await c.edit(f'<b>·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥  è·¥è·¥ú Ä @{me.username}  ô·¥è·¥õ …™s s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö. …¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ üôÇ\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥ús…™…¥…¢ /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.</b>')
        await asyncio.sleep(0.2)
        await message.reply("<b>·¥Ä…¥·¥Ö ·¥Ö·¥è…¥'·¥õ Íú∞·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü üòê...\n\n·¥° ú·¥Ä·¥õ …™s  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü?\n\n…™Íú∞ ·¥Ä…¥ è ·¥ús·¥á Ä s·¥õ·¥Ä Ä·¥õs  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ, ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥Ä ·¥èÍú∞ ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä …™…¥ ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. s·¥á…¥·¥Ö /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥Ö.</b>")
