import asyncio
import re
import time
import string
import ast
import math
import pytz
from datetime import datetime, timedelta
from Script import script
from pyrogram.errors import FloodWait, UserIsBlocked, MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty, MessageNotModified, PeerIdInvalid, ChatAdminRequired
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ChatPermissions, InputMediaPhoto, BotCommand
from pyrogram import Client, filters, enums
from utils import get_size, decode, encode, update_settings, get_settings, is_subscribed, get_poster, temp, is_joined, get_time, get_shortlink, au_restart_all_bots
from database.db import db
from plugins.database import ub
from clone_database.users_db import *
from clone_database.premium import *
from info import ADMINS, API_ID, API_HASH, LOG_CHANNEL

@Client.on_callback_query(filters.regex(r"^add_premium#"))
async def add_premium(client: Client, query):
    try:
        _, bot_id, user_id, duration = query.data.split("#")
        user_id = int(user_id)
        days = int(duration.replace("days", ""))
        expiry_time = datetime.now(pytz.UTC) + timedelta(days=days)
        
        user_data = {
            "id": user_id,
            "expiry_time": expiry_time,
            "bot_id": int(bot_id)
        }
        await update_user(user_data)
        clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
        await clone_bot.send_message(chat_id=user_id, text=f"<b><u>Premium added‚úÖ</u> to your account for {days}. Enjoy! üòÄ</b>")
        await query.message.edit_text(
            f"<b>P Ä·¥á·¥ç…™·¥ú·¥ç A·¥Ñ·¥Ñ·¥áÍú±Íú± A·¥Ö·¥Ö·¥á·¥Ö T·¥è UÍú±·¥á Ä I·¥Ö {user_id} F·¥è Ä {days} D·¥Ä èÍú±.</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data=f"bot_prime_setgs#{bot_id}")]
            ])
        )
    except ValueError:
        await query.message.edit_text("Invalid data received in callback query.")
    except Exception as e:
        await query.message.edit_text(f"An error occurred: {str(e)}")
        
@Client.on_callback_query(filters.regex(r'^add_bot'))
async def add_bot(bot, query):
    await query.message.delete()
    b = await query.message.reply("<b>1) s·¥á…¥·¥Ö <code>/newbot</code> ·¥õ·¥è @BotFather\n2) …¢…™·¥†·¥á ·¥Ä …¥·¥Ä·¥ç·¥á Íú∞·¥è Ä  è·¥è·¥ú Ä  ô·¥è·¥õ.\n3) …¢…™·¥†·¥á ·¥Ä ·¥ú…¥…™«´·¥ú·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á.\n4) ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™·¥õ ú  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.\n5) Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
    
    try:
        msg = await bot.listen(query.message.chat.id)
        if msg.text == '/cancel':
            await b.delete()
            return await query.message.reply('<b>·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss üö´</b>')
        if msg.forward_from and msg.forward_from.id == 93372553:
            try:
                bot_token = re.findall(r"\b(\d+:[A-Za-z0-9_-]+)\b", msg.text)[0]
            except:
                await b.delete()
                return await query.message.reply('<b>s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ üòï</b>')
        else:
            await b.delete()
            return await query.message.reply('<b>…¥·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö Íú∞ Ä·¥è·¥ç @BotFather üòë</b>')
        await b.delete()
        # Assuming db.is_bot_found_using_token and other functions are defined elsewhere
        token_found = await db.is_bot_found_using_token(bot_token)
        if token_found:
            return await query.message.edit("<b>‚ö†Ô∏è ·¥è·¥è·¥òs! ·¥õ ú…™s  ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥ú…¥…¥…™…¥…¢...</b>")
        c = await query.message.reply('<b>üßë‚Äçüíª ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ …™…¥Íú∞·¥è...</b>')
        clone_bot = Client(
            name=bot_token,
            api_id=API_ID,
            api_hash=API_HASH,
            bot_token=bot_token,
            plugins={"root": "clone_plugins"}
        )
        try:
            await clone_bot.start()
        except Exception as e:
            await c.edit(f'Error - <code>{e}</code>')
            return
        me = await clone_bot.get_me()
        temp.CLONE_BOTS_START_TIME[me.id] = time.time()
        temp.CLONE_BOTS[query.from_user.id] = clone_bot
        await clone_bot.set_bot_commands(
            [BotCommand("start", "Start The Bot!"),
             BotCommand("stats", "Get Bot Status."),
             BotCommand("myplan", "Check Premium Status."),
             BotCommand("broadcast", "Broadcast Message to bot users.")]
        )
        if query.from_user.username:
            owner = f"<a href='https://t.me/{query.from_user.username}'>{query.from_user.first_name}</a>"
        else:
            owner = f"<a href='tg://user?id={query.from_user.id}'>{query.from_user.first_name}</a>"
        await db.add_bot(query.from_user.id, owner, me.id, bot_token, me.username)
        tz = pytz.timezone('Asia/Colombo')
        await db.update_bot_last_used(me.id, datetime.now(tz))
        await bot.send_message(LOG_CHANNEL, f'New bot created by {me.username}')
        btn = [[
            InlineKeyboardButton("üñãÔ∏è ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  ô·¥è·¥õ", callback_data='clone_bot_settings')
        ]]
        await c.edit(f'<b>·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥  è·¥è·¥ú Ä @{me.username}  ô·¥è·¥õ …™s s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö. …¥·¥è·¥°  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ üôÇ\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥ús…™…¥…¢  ô·¥á ü ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥</b>', reply_markup=InlineKeyboardMarkup(btn))
        await asyncio.sleep(0.2)
        await query.message.reply("<b>·¥Ä…¥·¥Ö ·¥Ö·¥è…¥'·¥õ Íú∞·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü üòê...\n\n·¥° ú·¥Ä·¥õ …™s  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü?\n\n…™Íú∞ ·¥Ä…¥ è ·¥ús·¥á Ä s·¥õ·¥Ä Ä·¥õs  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ, ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥Ä ·¥èÍú∞ ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä …™…¥ ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. s·¥á…¥·¥Ö /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥Ö.</b>")
    except Exception as e:
        print(e)

@Client.on_callback_query(filters.regex(r"^restart_all_bots$"))
async def handle_ac_restart_all_bots(client: Client, query: CallbackQuery):
    if query.from_user.id not in ADMINS:
        await query.answer("You do not have permission to use this command.", show_alert=True)
        return
    await au_restart_all_bots(query)

@Client.on_callback_query()
async def query_handler(client: Client, query: CallbackQuery):
    if query.data.startswith("close"):
        ident, userid = query.data.split("#")
        if int(userid) not in [query.from_user.id, 0]:
            return await query.answer("‚ö†Ô∏è ·¥õ ú…™s …™s …¥·¥è·¥õ Íú∞·¥è Ä  è·¥è·¥ú", show_alert=True)

        await query.answer("üóë")
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass

    elif query.data == "confirm_bot_delete":
        bot = await db.get_bot_from_user(query.from_user.id)
        await db.delete_bot(query.from_user.id)
        await query.message.edit_text(f"<b>s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  è·¥è·¥ú Ä @{bot['username']} ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ.\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥è·¥õ ú·¥á Ä …¥·¥á·¥° ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ ·¥õ ú·¥á…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥ús…™…¥…¢ /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö</b>", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data='start')]]))
        clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
        try:
            await clone_bot.stop()
        except:
            pass


    elif query.data.startswith("bot_force_channel_setgs"):
        _, bot_id = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        if not settings['is_active']:
            await query.answer("üö´  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö,  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s...", show_alert=True)
            return
        if 'req_fsub' not in settings:
            settings['req_fsub'] = False
        req_fsub = settings['req_fsub']
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ', callback_data=f'bot_set_force_channel#{bot_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'bot_force_channel_delete#{bot_id}')
        ],[
            InlineKeyboardButton('OÍú∞Íú∞ R·¥áQ FÍú±·¥ú ô' if settings['req_fsub'] else 'O…¥ R·¥áQ FÍú±·¥ú ô', callback_data=f"bot_update_req_fsub#{bot_id}#{settings['req_fsub']}"),
            InlineKeyboardButton('·¥èÍú∞Íú∞ s·¥ú ôs·¥Ñ Ä…™ ô·¥á' if settings['force_subscribe'] else '·¥è…¥ s·¥ú ôs·¥Ñ Ä…™ ô·¥á', callback_data=f"bot_update_force_subscribe#{bot_id}#{settings['force_subscribe']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        subscribe = '·¥è…¥ ‚úÖ' if settings['force_subscribe'] else '·¥èÍú∞Íú∞ ‚ùå'
        req_fsubs = '·¥è…¥ ‚úÖ' if settings['req_fsub'] else '·¥èÍú∞Íú∞ ‚ùå'
        if settings['force_channel'] == "":
            channel = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü..."
        else:
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            chat = await clone_bot.get_chat(settings['force_channel'])
            channel = f"Force Channel: {chat.title}"
        await query.message.edit(f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥ …¢…™·¥†·¥á Íú∞…™ ü·¥ás.\n\ns·¥ú ôs·¥Ñ Ä…™ ô·¥á - {subscribe}\nR·¥áQ·¥ú·¥áÍú±·¥õ FÍú±·¥ú ô - {req_fsubs}\n\n{channel}", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_update_force_subscribe"):
        _, bot_id, status = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        if not settings['is_active']:
            await query.answer("üö´  è·¥è·¥ú Ä  ô·¥è·¥õ …™s ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö,  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s...", show_alert=True)
            return
        if settings['force_channel'] == "":
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.", show_alert=True)
            return
        if status == 'True':
            await db.update_bot_settings(int(bot_id), 'force_subscribe', False)
        else:
            await db.update_bot_settings(int(bot_id), 'force_subscribe', True)
        settings = await db.get_bot_settings(int(bot_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ', callback_data=f'bot_set_force_channel#{bot_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'bot_force_channel_delete#{bot_id}')
        ],[
            InlineKeyboardButton('OÍú∞Íú∞ R·¥áQ FÍú±·¥ú ô' if settings['req_fsub'] else 'O…¥ R·¥áQ FÍú±·¥ú ô', callback_data=f"bot_update_req_fsub#{bot_id}#{settings['req_fsub']}"),
            InlineKeyboardButton('·¥èÍú∞Íú∞ s·¥ú ôs·¥Ñ Ä…™ ô·¥á' if settings['force_subscribe'] else '·¥è…¥ s·¥ú ôs·¥Ñ Ä…™ ô·¥á', callback_data=f"bot_update_force_subscribe#{bot_id}#{settings['force_subscribe']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        subscribe = '·¥è…¥ ‚úÖ' if settings['force_subscribe'] else '·¥èÍú∞Íú∞ ‚ùå'
        req_fsubs = '·¥è…¥ ‚úÖ' if settings['req_fsub'] else '·¥èÍú∞Íú∞ ‚ùå'
        if settings['force_channel'] == "":
            channel = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü."
        else:
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            chat = await clone_bot.get_chat(settings['force_channel'])
            channel = f"Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}"
        await query.message.edit(f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥ …¢…™·¥†·¥á Íú∞…™ ü·¥ás.\n\ns·¥ú ôs·¥Ñ Ä…™ ô·¥á - {subscribe}\nR·¥áQ·¥ú·¥áÍú±·¥õ FÍú±·¥ú ô - {req_fsubs}\n\n{channel}", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_force_channel_delete"):
        _, bot_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_force_channel_setgs#{bot_id}')
        ]]
        settings = await db.get_bot_settings(int(bot_id))
        if settings['force_channel'] == "":
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü...", show_alert=True)
            return
        await db.update_bot_settings(int(bot_id), 'force_subscribe', False)
        await db.update_bot_settings(int(bot_id), 'force_channel', "")
        await query.message.edit_text("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü üóë", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_set_force_channel"):
        _, bot_id = query.data.split("#")
        bot = await db.get_bot(int(bot_id))
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_force_channel_setgs#{bot_id}')
        ]]
        await query.message.edit_text(f"Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á.\n·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á @{bot['username']} …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  è·¥è·¥ú Ä  Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        if msg.forward_from_chat and msg.forward_from_chat.type == enums.ChatType.CHANNEL:
            chat_id = msg.forward_from_chat.id
        else:
            await query.message.delete()
            await query.message.reply('üòí …¥·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á ü...', reply_markup=InlineKeyboardMarkup(btn))
            return
        clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
        await query.message.delete()
        try:
            chat = await clone_bot.get_chat(chat_id)
            link = await clone_bot.create_chat_invite_link(chat.id)
        except Exception as e:
            await query.message.reply(f'‚ÄºÔ∏è s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢\n\n<code>{e}</code>', reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_bot_settings(int(bot_id), 'force_channel', chat.id)
        await query.message.reply(f"üí• s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_log_channel_setgs"):
        _, bot_id = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        if not settings['is_active']:
            await query.answer(" è·¥è·¥ú Ä  ô·¥è·¥õ …™s ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö,  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s", show_alert=True)
            return
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'bot_set_log_channel#{bot_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'bot_log_channel_delete#{bot_id}')
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        if settings['log_channel'] == "":
            channel = "** è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü‚ùóÔ∏è**"
        else:
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            chat = await clone_bot.get_chat(settings['log_channel'])
            channel = f" è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}"
        await query.message.edit(f"<b>·¥° ú·¥Ä·¥õ …™s  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ??\n\n…™Íú∞ …¥·¥á·¥° ·¥ús·¥á Äs s·¥õ·¥Ä Ä·¥õ  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ ·¥õ ú·¥á…¥  ô·¥è·¥õ …¥·¥è·¥õ…™Íú∞…™·¥ás  è·¥è·¥ú\n\n{channel}</b>", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_update_req_fsub"):
        _, bot_id, status = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        if settings['force_channel'] == "":
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.", show_alert=True)
            return
        if status == 'True':
            await db.update_bot_settings(int(bot_id), 'req_fsub', False)
        else:
            await db.update_bot_settings(int(bot_id), 'req_fsub', True)
        settings = await db.get_bot_settings(int(bot_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ', callback_data=f'bot_set_force_channel#{bot_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'bot_force_channel_delete#{bot_id}')
        ],[
            InlineKeyboardButton('·¥èÍú∞Íú∞ req fsub' if settings['req_fsub'] else '·¥è…¥ req fsub', callback_data=f"bot_update_req_fsub#{bot_id}#{settings['req_fsub']}"),
            InlineKeyboardButton('·¥èÍú∞Íú∞ s·¥ú ôs·¥Ñ Ä…™ ô·¥á' if settings['force_subscribe'] else '·¥è…¥ s·¥ú ôs·¥Ñ Ä…™ ô·¥á', callback_data=f"bot_update_force_subscribe#{bot_id}#{settings['force_subscribe']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        req_fsubs = '·¥è…¥ ‚úÖ' if settings['req_fsub'] else '·¥èÍú∞Íú∞ ‚ùå'
        subscribe = '·¥è…¥ ‚úÖ' if settings['force_subscribe'] else '·¥èÍú∞Íú∞ ‚ùå'
        if settings['force_channel'] == "":
            channel = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü."
        else:
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            chat = await clone_bot.get_chat(settings['force_channel'])
            channel = f"Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}"
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™…¥ …¢…™·¥†·¥á Íú∞…™ ü·¥ás.\n\ns·¥ú ôs·¥Ñ Ä…™ ô·¥á - {subscribe}\nR·¥áQ·¥ú·¥áÍú±·¥õ FÍú±·¥ú ô - {req_fsubs}\n\n{channel}</b>", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_set_log_channel"):
        _, bot_id = query.data.split("#")
        bot = await db.get_bot(int(bot_id))
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_log_channel_setgs#{bot_id}')
        ]]
        await query.message.edit_text(f"<b>Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á,\n·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á @{bot['username']} …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("**·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...**", reply_markup=InlineKeyboardMarkup(btn))
            return
        if msg.forward_from_chat and msg.forward_from_chat.type == enums.ChatType.CHANNEL:
            chat_id = msg.forward_from_chat.id
        else:
            await query.message.delete()
            await query.message.reply('**…¥·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á ü**', reply_markup=InlineKeyboardMarkup(btn))
            return
        clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
        await query.message.delete()
        try:
            chat = await clone_bot.get_chat(chat_id)
            t = await clone_bot.send_message(chat.id, 'Test!')
            await t.delete()
        except Exception as e:
            await query.message.reply(f'**üíî s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢...**\n\n<code>{e}</code>', reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_bot_settings(int(bot_id), 'log_channel', chat.id)
        await query.message.reply(f"**‚ö°Ô∏è s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü** - {chat.title}", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_admin_setgs"):
        _, bot_id = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        admin_ids = settings.get('admin_ids', [])
        admins_list = []
        for admin_id in admin_ids:
            user = await get_clone_bot_user(bot_id, admin_id)
            user_name = user.get("name", "Unknown") if user else "Unknown User"
            admins_list.append(f"‚Ä¢ {user_name} ({admin_id})")
        admins_display = "\n".join(admins_list) if admins_list else "<b>T ú·¥á Ä·¥á A Ä·¥á N·¥è A·¥Ö·¥ç…™…¥s Y·¥á·¥õ.</b>"
        btn = [[
            InlineKeyboardButton('‚ûï A·¥Ö·¥Ö A·¥Ö·¥ç…™…¥', callback_data=f'bot_add_admin#{bot_id}'),
            InlineKeyboardButton('‚ûñ R·¥á·¥ç·¥è·¥†·¥á A·¥Ö·¥ç…™…¥', callback_data=f'bot_remove_admin#{bot_id}')
        ],[
            InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        await query.message.edit(f"<b>A·¥Ö·¥ç…™…¥ H·¥Ä·¥†·¥á A·¥Ñ·¥Ñ·¥áÍú±Íú± T·¥è ·¥Ä ü ü Y·¥è·¥ú Ä C ü·¥è…¥·¥á F·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú±, I…¥·¥Ñ ü·¥ú·¥Ö·¥á B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥ÄÍú±·¥õ…™…¥…¢.\n\nC·¥ú Ä Ä·¥á…¥·¥õ A·¥Ö·¥ç…™…¥s:\n\n{admins_display}</b>", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_add_admin"):
        _, bot_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_admin_setgs#{bot_id}')
        ]]
        await query.message.edit_text("<b>S·¥á…¥·¥Ö M·¥á T ú·¥á Us·¥á Ä I·¥Ö T·¥è A·¥Ö·¥Ö As A…¥ A·¥Ö·¥ç…™…¥.\n\n/cancel - C·¥Ä…¥·¥Ñ·¥á ü T ú…™s P Ä·¥è·¥Ñ·¥áss.</b>")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("<b>C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö T ú…™s P Ä·¥è·¥Ñ·¥áss...</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        if not msg.text.isdigit():
            await query.message.delete()
            await query.message.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä I·¥Ö.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        admin_id = int(msg.text)
        user = await get_clone_bot_user(bot_id, admin_id)
        if not user:
            await query.message.edit_text("<b>‚ö†Ô∏è T ú·¥á Us·¥á Ä H·¥Äs N·¥è·¥õ S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö T ú·¥á C ü·¥è…¥·¥á B·¥è·¥õ Y·¥á·¥õ.\n\nP ü·¥á·¥Äs·¥á M·¥Ä·¥ã·¥á S·¥ú Ä·¥á T ú·¥á Us·¥á Ä S·¥õ·¥Ä Ä·¥õs T ú·¥á B·¥è·¥õ B·¥áÍú∞·¥è Ä·¥á P Ä·¥è·¥Ñ·¥á·¥á·¥Ö…™…¥…¢.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        user_name = user.get("name", "Unknown")
        settings = await db.get_bot_settings(int(bot_id))
        admin_ids = settings.get('admin_ids', [])
        if admin_id in admin_ids:
            await query.message.delete()
            await query.message.reply("<b>‚ö†Ô∏è Us·¥á Ä I·¥Ö A ü Ä·¥á·¥Ä·¥Ö è Ex…™s·¥õs.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        admin_ids.append(admin_id)
        await db.update_bot_settings(int(bot_id), 'admin_ids', admin_ids)
        await query.message.delete()
        await query.message.reply("<b>‚úÖ A·¥Ö·¥ç…™…¥ A·¥Ö·¥Ö·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è.</b>", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data.startswith("bot_remove_admin"):
        _, bot_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_admin_setgs#{bot_id}')
        ]]
        settings = await db.get_bot_settings(int(bot_id))
        admin_ids = settings.get('admin_ids', [])
        if not admin_ids:
            await query.answer("T ú·¥á Ä·¥á A Ä·¥á N·¥è A·¥Ö·¥ç…™…¥s T·¥è R·¥á·¥ç·¥è·¥†·¥á.", show_alert=True)
            return
        await query.message.edit_text("<b>S·¥á…¥·¥Ö M·¥á T ú·¥á Us·¥á Ä I·¥Ö T·¥è R·¥á·¥ç·¥è·¥†·¥á F Ä·¥è·¥ç A·¥Ö·¥ç…™…¥s.\n\n/cancel - C·¥Ä…¥·¥Ñ·¥á ü T ú…™s P Ä·¥è·¥Ñ·¥áss.</b>")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("<b>C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö T ú…™s P Ä·¥è·¥Ñ·¥áss...</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        if not msg.text.isdigit():
            await query.message.delete()
            await query.message.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä I·¥Ö.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        admin_id = int(msg.text)
        if admin_id not in admin_ids:
            await query.message.delete()
            await query.message.reply("<b>‚ö†Ô∏è Us·¥á Ä I·¥Ö N·¥è·¥õ F·¥è·¥ú…¥·¥Ö I…¥ A·¥Ö·¥ç…™…¥s.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        admin_ids.remove(admin_id)
        await db.update_bot_settings(int(bot_id), 'admin_ids', admin_ids)
        await query.message.delete()
        await query.message.reply("<b>‚úÖ A·¥Ö·¥ç…™…¥ R·¥á·¥ç·¥è·¥†·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è.</b>", reply_markup=InlineKeyboardMarkup(btn))
#----------------------------------------------------------------------- AUTO FILTER PREMIUM ----------------------------------------------------------------------------#
    elif query.data.startswith("bot_prime_setgs"):
        _, bot_id = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        btn = [[
            InlineKeyboardButton('üè∑Ô∏è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥ ·¥ò·¥áx·¥õ üè∑Ô∏è', callback_data=f'bot_prime_text#{bot_id}')
        ],[
            InlineKeyboardButton('‚ûï ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä ‚ûï', callback_data=f"bot_add_premium#{bot_id}")
        ],[
            InlineKeyboardButton('‚ûñ  Ä·¥á·¥ç·¥è·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä ‚ûñ', callback_data=f'remove_prmuser#{bot_id}')
        ],[
            InlineKeyboardButton('üîê ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥è·¥Ö·¥á …™Íú± O…¥ ‚úî' if settings['premium_mode'] else 'üîê ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥è·¥Ö·¥á …™Íú± O“ì“ì ‚úò', callback_data=f"bot_prime_on_setgs#{bot_id}#{settings['premium_mode']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        status = '·¥è…¥ ‚úÖ' if settings['premium_mode'] else '·¥èÍú∞Íú∞ ‚ùå'
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥á·¥õ·¥õ…™…¥…¢s  ú·¥á Ä·¥á. \n\n·¥õ ú…™s “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ·¥°·¥è Ä·¥ã ·¥è…¥ ü è ·¥° ú·¥á…¥  ü…™…¥·¥ã s ú·¥è Ä·¥õ…¥·¥á Ä …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö\n\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús - {status}</b>", reply_markup=InlineKeyboardMarkup(btn))
    
    elif query.data.startswith("bot_prime_on_setgs"):
        _, bot_id, status = query.data.split("#")
        settings = await db.get_bot_settings(int(bot_id))
        if status == 'True':
            await db.update_bot_settings(int(bot_id), 'premium_mode', False)
        else:
            await db.update_bot_settings(int(bot_id), 'premium_mode', True)
        crazy = [[
            InlineKeyboardButton('üè∑Ô∏è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥ ·¥õ·¥áx·¥õ üè∑Ô∏è', callback_data=f'bot_prime_text#{bot_id}')
        ],[
            InlineKeyboardButton('‚ûï ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä ‚ûï', callback_data=f"bot_add_premium#{bot_id}")
        ],[
            InlineKeyboardButton('‚ûñ  Ä·¥á·¥ç·¥è·¥†·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä ‚ûñ', callback_data=f'remove_prmuser#{bot_id}')
        ],[
            InlineKeyboardButton('üîê ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥è·¥Ö·¥á …™Íú± O…¥ ‚úî' if settings['premium_mode'] else 'üîê ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥è·¥Ö·¥á …™Íú± O“ì“ì ‚úò', callback_data=f"bot_prime_on_setgs#{bot_id}#{settings['premium_mode']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')
        ]]
        status = '·¥è…¥ ‚úÖ' if settings['premium_mode'] else '·¥èÍú∞Íú∞ ‚ùå'
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥á·¥õ·¥õ…™…¥…¢s  ú·¥á Ä·¥á. \n\n·¥õ ú…™s “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ·¥°·¥è Ä·¥ã ·¥è…¥ ü è ·¥° ú·¥á…¥  ü…™…¥·¥ã s ú·¥è Ä·¥õ…¥·¥á Ä …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö\n\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús - {status}</b>", reply_markup=InlineKeyboardMarkup(crazy))
    
    elif query.data.startswith("bot_prime_text"):
        _, bot_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_prime_setgs#{bot_id}')
        ]]
        await query.message.edit_text("s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥õ·¥áx·¥õ.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        try:
            msg.text.format(mention='mention', chat_title='chat_title')
        except Exception as e:
            await query.message.delete()
            await query.message.reply(f'·¥° Ä·¥è…¥…¢ Íú∞·¥è Ä·¥ç·¥Ä·¥õ <code>{e}</code> ·¥ús·¥á·¥Ö.', reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_bot_settings(int(bot_id), 'premium_text', msg.text)
        await query.message.delete()
        await query.message.reply(f"s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥õ·¥áx·¥õ -\n\n{msg.text}", disable_web_page_preview=True, reply_markup=InlineKeyboardMarkup(btn))
        
    elif query.data.startswith("remove_prmuser"):
        _, bot_id = query.data.split("#")
        btn = [[InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_prime_setgs#{bot_id}')]]
        await query.message.edit_text(
            "<b>S·¥á…¥·¥Ö M·¥á T ú·¥á Us·¥á Ä I·¥Ö T·¥è R·¥á·¥ç·¥è·¥†·¥á.\n\n/cancel - C·¥Ä…¥·¥Ñ·¥á ü T ú…™s P Ä·¥è·¥Ñ·¥áss.</b>"
        )
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            return await query.message.reply("<b>C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö T ú…™s P Ä·¥è·¥Ñ·¥áss...</b>", reply_markup=InlineKeyboardMarkup(btn))
        if not msg.text.isdigit():
            return await query.message.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä I·¥Ö.</b>", reply_markup=InlineKeyboardMarkup(btn))
        user_id = int(msg.text)
        await remove_premium(user_id, int(bot_id))
        user_id = int(msg.text)
        clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
        await clone_bot.send_message(chat_id=user_id, text=f"<b> è·¥è·¥ú Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö.</b>")
        await query.message.delete()
        await query.message.reply("<b>‚úÖ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç R·¥á·¥ç·¥è·¥†·¥á·¥Ö S·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è.</b>", reply_markup=InlineKeyboardMarkup(btn))
            
    elif query.data.startswith("bot_add_premium"):
        _, bot_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº B·¥Ä·¥Ñ·¥ã', callback_data=f'bot_prime_setgs#{bot_id}')
        ]]
        await query.message.edit_text("<b>S·¥á…¥·¥Ö M·¥á T ú·¥á Us·¥á Ä I·¥Ö T·¥è A·¥Ö·¥Ö As A…¥ A·¥Ö·¥ç…™…¥.\n\n/cancel - C·¥Ä…¥·¥Ñ·¥á ü T ú…™s P Ä·¥è·¥Ñ·¥áss.</b>")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("<b>C·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö T ú…™s P Ä·¥è·¥Ñ·¥áss...</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        if not msg.text.isdigit():
            await query.message.delete()
            await query.message.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö Us·¥á Ä I·¥Ö.</b>", reply_markup=InlineKeyboardMarkup(btn))
            return
        user_id = int(msg.text)
        buttons = [
            [InlineKeyboardButton("1 ·¥°·¥á·¥á·¥ã", callback_data=f"add_premium#{bot_id}#{user_id}#7days")],
            [InlineKeyboardButton("15 ·¥Ö·¥Ä èÍú±", callback_data=f"add_premium#{bot_id}#{user_id}#15days")],
            [InlineKeyboardButton("1 ·¥ç·¥è…¥·¥õ ú", callback_data=f"add_premium#{bot_id}#{user_id}#30days")],
            [InlineKeyboardButton("2 ·¥ç·¥è…¥·¥õ úÍú±", callback_data=f"add_premium#{bot_id}#{user_id}#60days")],
        ]
        await query.message.reply("<b>·¥Ñ ú·¥è·¥èÍú±·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò ü·¥Ä…¥.</b>", reply_markup=InlineKeyboardMarkup(buttons))
            
    elif query.data.startswith("bot_update_active"):
        _, bot_id, status = query.data.split("#")
        btn = [[InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'bot_settings#{bot_id}')]]
        if status == 'True':
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            try:
                await clone_bot.stop()
            except Exception as e:
                return await query.message.edit(f'<b>üíî s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢...\n\n<code>{e}</code></b>', reply_markup=InlineKeyboardMarkup(btn))
            await db.update_bot_settings(int(bot_id), 'is_active', False)
            await query.message.edit("<b>s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ ‚úÖ</b>", reply_markup=InlineKeyboardMarkup(btn))
        else:
            clone_bot = temp.CLONE_BOTS.get(query.from_user.id)
            await query.message.edit('s·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...')
            try:
                await clone_bot.start()
            except Exception as e:
                return await query.message.edit(f'üíî s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢...\n\n<code>{e}</code>', reply_markup=InlineKeyboardMarkup(btn))
            temp.CLONE_BOTS_START_TIME[int(bot_id)] = time.time()
            await db.update_bot_settings(int(bot_id), 'is_active', True)
            await query.message.edit("**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ ‚ôªÔ∏è**", reply_markup=InlineKeyboardMarkup(btn))

    
