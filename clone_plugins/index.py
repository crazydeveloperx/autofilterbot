from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
from database.db import db
from utils import get_time
import re
from info import ADMINS
from typing import Union, Optional, AsyncGenerator
from pymongo import MongoClient
from pymongo.errors import DuplicateKeyError
from clone_database.files_db import save_clone_bot_file
import asyncio

class index_temp(object):
    IS_INDEXINGS = {}
    IS_CANCELS = {}

@Client.on_message(filters.private & filters.command('index') & filters.user(ADMINS))
async def start_index(client, message):
    me = await client.get_me()
    bot = await db.get_bot(me.id)
    settings = await db.get_bot_settings(me.id)
    if bot['_id'] != message.from_user.id:
        return await message.reply(' è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥èÍú∞ ·¥õ ú…™s  ô·¥è·¥õ üòë')
    if settings['mongodb'] == "":
        return await message.reply("‚ùå  è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥ç·¥è…¥…¢·¥è ·¥Ö ô")
    indexing = index_temp.IS_INDEXINGS.get(message.from_user.id)
    if indexing:
        return await message.reply('·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …™…¥·¥Ö·¥áx ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢! ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …™·¥õ.')

    m = await message.reply("Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  ü·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä s·¥á…¥·¥Ö  ü·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ü…™…¥·¥ã.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.")
    msg = await client.listen(message.from_user.id)
    if msg.text == '/cancel':
        await m.delete()
        await message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...")
        return
    if msg.text and msg.text.startswith("https://t.me"):
        try:
            try:
                _, _, _, chat_id, msg_id = msg.text.split("/")
                last_msg_id = int(msg_id)
                if chat_id.isnumeric():
                    chat_id = int(("-100" + chat_id))
            except:
                _, _, _, _, chat_id, msg_id = msg.text.split("/")
                last_msg_id = int(msg_id)
                if chat_id.isnumeric():
                    chat_id = int(("-100" + chat_id))
        except:
            await m.delete()
            await message.reply('‚ö†Ô∏è …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á  ü…™…¥·¥ã')
            return
    elif msg.forward_from_chat and msg.forward_from_chat.type == enums.ChatType.CHANNEL:
        last_msg_id = msg.forward_from_message_id
        chat_id = msg.forward_from_chat.username or msg.forward_from_chat.id
    else:
        await m.delete()
        await message.reply('üí¢ s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢')
        return
    await m.delete()
    try:
        chat = await client.get_chat(chat_id)
    except Exception as e:
        return await message.reply(f'Error - <code>{e}</code>')
    if chat.type != enums.ChatType.CHANNEL:
        return await message.reply("…™ ·¥Ñ·¥Ä…¥ …™…¥·¥Ö·¥áx ·¥è…¥ ü è ·¥Ñ ú·¥Ä…¥…¥·¥á üs.")
    s = await message.reply('s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä s·¥ã…™·¥ò ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥ú·¥ç ô·¥á Ä...')
    msg = await client.listen(message.from_user.id)
    try:
        skip = int(msg.text)
    except:
        await s.delete()
        await message.reply('…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä!!')
        return
    await s.delete()
    buttons = [[
        InlineKeyboardButton(' è·¥ás', callback_data=f'index#yes#{chat_id}#{last_msg_id}#{skip}')
    ],[
        InlineKeyboardButton('·¥Ñ ü·¥ès·¥á', callback_data=f'index#close#{chat_id}#{last_msg_id}#{skip}')
    ]]
    await message.reply(f"<b>·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …™…¥·¥Ö·¥áx <b>{chat.title}</b> ·¥Ñ ú·¥Ä…¥…¥·¥á ü??</b>", reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex(r'^index'))
async def index_callback(bot, query):
    _, ident, chat, lst_msg_id, skip = query.data.split("#")
    if ident == 'yes':
        msg = query.message
        await msg.edit('‚úÖ s·¥õ·¥Ä Ä·¥õ…™…¥…¢ …™…¥·¥Ö·¥áx…™…¥…¢...')
        try:
            chat = int(chat)
        except:
            chat = chat
        index_temp.IS_INDEXINGS[query.from_user.id] = True
        await index_files(int(lst_msg_id), bot, chat, msg, int(skip), query.from_user.id)

    elif ident == 'close':
        await query.answer("Okay!")
        await query.message.delete()

    elif ident == 'cancel':
        await query.message.edit("·¥õ Ä è…™…¥…¢ ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü …™…¥·¥Ö·¥áx…™…¥…¢...")
        index_temp.IS_CANCELS[query.from_user.id] = True


async def index_files(lst_msg_id, bot, chat, msg, skip, user_id):
    me = await bot.get_me()
    index_temp.IS_CANCELS[user_id] = False
    fetched = skip
    total = lst_msg_id
    remaining = lst_msg_id - skip
    saved = 0
    duplicate = 0
    deleted = 0
    unsupported = 0
    start_time = time.time()

    try:
        async for message in iter_messages(bot, chat, lst_msg_id, skip):
            if index_temp.IS_CANCELS.get(user_id):
                break
            fetched += 1
            remaining -= 1
            if fetched % 30 == 0:
                btn = [[
                    InlineKeyboardButton('·¥Ñ·¥Ä…¥·¥Ñ·¥á ü', callback_data=f'index#cancel#{chat}#{lst_msg_id}#{skip}')
                ]]
                await msg.edit_text(text=f"<b>üì• …™…¥·¥Ö·¥áx ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...\n\n·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{total}</code>\nÍú∞·¥á·¥õ·¥Ñ ú·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{fetched}</code>\n Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{remaining}</code>\n·¥õ·¥è·¥õ·¥Ä ü Íú∞…™ ü·¥ás s·¥Ä·¥†·¥á·¥Ö - <code>{saved}</code>\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{deleted}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{unsupported}</code></b>", reply_markup=InlineKeyboardMarkup(btn))
            if message.empty:
                deleted += 1
                await asyncio.sleep(0.1)
                continue
            elif not message.media:
                unsupported += 1
                continue
            elif message.media not in [enums.MessageMediaType.DOCUMENT, enums.MessageMediaType.VIDEO]:
                unsupported += 1
                continue
            media = getattr(message, message.media.value, None)
            if not media:
                unsupported += 1
                continue
            sts = await save_clone_bot_file(me.id, media)
            await asyncio.sleep(0.1)
            if sts == "Saved":
                saved += 1
            elif sts == "Duplicates":
                duplicate += 1
    except Exception as e:
        index_temp.IS_INDEXINGS[user_id] = False
        await msg.edit(f'<b>‚ö†Ô∏è …™…¥·¥Ö·¥áx ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö!!\n\n·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ - <code>{time_taken}</code>\n\n·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{total}</code>\nÍú∞·¥á·¥õ·¥Ñ ú·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{fetched}</code>\n·¥õ·¥è·¥õ·¥Ä ü s·¥Ä·¥†·¥á·¥Ö Íú∞…™ ü·¥ás - <code>{saved}</code>\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{deleted}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö -<code>{unsupported}</code></b>')
        await msg.reply(f"‚ö†Ô∏è …™…¥·¥Ö·¥áx ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö...\n\nError - {e}")
    else:
        index_temp.IS_INDEXINGS[user_id] = False
        time_taken = get_time(time.time() - start_time)
        await msg.reply("<b>…™…¥·¥Ö·¥áx ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö ‚úÖ</b>")
        await msg.edit(f'<b>…™…¥·¥Ö·¥áx ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö ‚úÖ\n\n·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ - <code>{time_taken}</code>\n\n·¥õ·¥è·¥õ·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{total}</code>\nÍú∞·¥á·¥õ·¥Ñ ú·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás - <code>{fetched}</code>\n·¥õ·¥è·¥õ·¥Ä ü s·¥Ä·¥†·¥á·¥Ö Íú∞…™ ü·¥ás - <code>{saved}</code>\n·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{duplicate}</code>\n·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{deleted}</code>\n·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö Íú∞…™ ü·¥ás s·¥ã…™·¥ò·¥ò·¥á·¥Ö - <code>{unsupported}</code></b>')


async def iter_messages(bot, chat_id: Union[int, str], limit: int, offset: int = 0) -> Optional[AsyncGenerator["types.Message", None]]:
    current = offset
    while True:
        new_diff = min(200, limit - current)
        if new_diff <= 0:
            return
        messages = await bot.get_messages(chat_id, list(range(current, current+new_diff+1)))
        for message in messages:
            yield message
            current += 1
